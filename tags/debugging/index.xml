<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Debugging on Jamie J Quinn</title><link>https://example.com/tags/debugging/</link><description>Recent content in Debugging on Jamie J Quinn</description><generator>Hugo</generator><language>en-GB</language><copyright>Copyright Â© 2024, Jamie J Quinn.</copyright><lastBuildDate>Fri, 19 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/tags/debugging/index.xml" rel="self" type="application/rss+xml"/><item><title>4 Tips on Making Simulations Bug Resistant</title><link>https://example.com/4-tips-on-making-simulations-bug-resistant/</link><pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate><guid>https://example.com/4-tips-on-making-simulations-bug-resistant/</guid><description>Having written and used a decent number of simulations over the past few years I&amp;rsquo;ve come to understand that preventing bugs in scientific software is just a wee bit different from how it&amp;rsquo;s usually done in more standard software development.
For one thing, many of the simulations come under the category of high performance computing (HPC) simulations, so it can take a long time to build and run a test case, leading to iteration speeds that are painfully slow.</description></item></channel></rss>