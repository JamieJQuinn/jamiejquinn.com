<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fonts on Jamie J Quinn</title><link>https://example.com/tags/fonts/</link><description>Recent content in Fonts on Jamie J Quinn</description><generator>Hugo</generator><language>en-GB</language><copyright>Copyright Â© 2024, Jamie J Quinn.</copyright><lastBuildDate>Wed, 03 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/tags/fonts/index.xml" rel="self" type="application/rss+xml"/><item><title>Converting C437 to XNA-style Spritesheets</title><link>https://example.com/converting-c437-to-xna-style-spritesheets/</link><pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate><guid>https://example.com/converting-c437-to-xna-style-spritesheets/</guid><description>I&amp;rsquo;ve been struggling to get C437 PNG fonts loaded in Raylib due to its default PNG loader using a slightly different format. Here, I&amp;rsquo;ll detail a simple way of converting C437 PNGs to the format Raylib expects.
Raylib is a wonderful library for writing quick and simple GUI applications, especially games. I&amp;rsquo;ve been using it for about a year on various prototypes, most recently a roguelike in Zig. While Raylib&amp;rsquo;s text rendering is generally good, I wanted to be able to use old-school fonts using the Code page 437 character set.</description></item></channel></rss>