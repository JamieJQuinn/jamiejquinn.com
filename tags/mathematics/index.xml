<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mathematics on Jamie J Quinn</title><link>https://example.com/tags/mathematics/</link><description>Recent content in Mathematics on Jamie J Quinn</description><generator>Hugo</generator><language>en-GB</language><copyright>Copyright Â© 2024, Jamie J Quinn.</copyright><lastBuildDate>Wed, 05 Aug 2020 16:45:05 +0100</lastBuildDate><atom:link href="https://example.com/tags/mathematics/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Render Latex in Inkscape</title><link>https://example.com/how-to-render-latex-in-inkscape/</link><pubDate>Wed, 05 Aug 2020 16:45:05 +0100</pubDate><guid>https://example.com/how-to-render-latex-in-inkscape/</guid><description>Rendering latex equations or text in the graphics package Inkscape is not an intuitive task, so I&amp;rsquo;ve decided to create an extremely short tutorial on doing exactly that using Inkscape&amp;rsquo;s in-built latex extesion. It&amp;rsquo;s not difficult but the menus are quite cluttered and there&amp;rsquo;s a quirk to rendering to equations that&amp;rsquo;s helpful to know.
I&amp;rsquo;ve always found the default extension sufficient but if you&amp;rsquo;re looking for a more polished experience, check out TexText.</description></item><item><title>Finally, a strong, Abel woman</title><link>https://example.com/finally-a-strong-abel-woman/</link><pubDate>Mon, 01 Apr 2019 20:16:48 +0100</pubDate><guid>https://example.com/finally-a-strong-abel-woman/</guid><description>Just this month the Abel prize, commonly considered to be the Nobel prize of mathematics, was awarded to the first female prizewinner, Karen Keskulla Uhlenbeck. Now a professor emeritus at the University of Texas, and a visiting associate at the Institute for Advanced Study, Uhlenbeck&amp;rsquo;s work has had a profound impact on many areas of mathematics, with implications in theoretical physics.
Despite describing Einstein&amp;rsquo;s general relativity as &amp;ldquo;too hard&amp;rdquo;, in a single paper, Uhlenbeck is considered to have founded the field of geometric analysis, a mathematical discipline that mixes differential geometry (an extremely technical way of describing and analysing the nature of spaces) and differential equations (types of complicated equations that can describe the flow of water, the evolution of bacteria and fluctuations in the stock market).</description></item><item><title>Running Fluid Simulations in WebGL I - Simple Convection</title><link>https://example.com/running-fluid-simulations-in-webgl-i-simple-convection/</link><pubDate>Sun, 29 Jul 2018 00:00:00 +0000</pubDate><guid>https://example.com/running-fluid-simulations-in-webgl-i-simple-convection/</guid><description>Years ago I worked my way through Lorena Barba&amp;rsquo;s 12 steps to Navier-Stokes in Python, but recently I&amp;rsquo;ve been getting more and more into GPU programming and figured that it would be an interesting exercise to redo the steps in WebGL. Really when I say GPU programming I mean using general purpose tech like CUDA, but CUDA and WebGL are similar enough (the boilerplate is of course totally different but the idea of writing a kernel to act on many pixels/fluid cells is the same).</description></item><item><title>Mr. Julia</title><link>https://example.com/mr.-julia/</link><pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate><guid>https://example.com/mr.-julia/</guid><description>Going on my theme of wonderfully fractal images, I wrote a little simulation to introduce myself to webGL. Go have a wee play about with it here.
The Maths You can find lots of information about Julia fractals all around the web so I won&amp;rsquo;t go into much detail at all here. All I&amp;rsquo;ll say is that the fractals, named for Gaston Julia, come about by iterating a complex number through the formula $$z_{n+1} = z_n^2 + c,$$ where \(c\) is some complex number.</description></item><item><title>Regularly Expressional Fractalations</title><link>https://example.com/regularly-expressional-fractalations/</link><pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate><guid>https://example.com/regularly-expressional-fractalations/</guid><description>There&amp;rsquo;s something about fractals that humans find fascinating. They manage to contain a beautiful impression of infinity despite being not very difficult to create. These fractals have been produced by a very simple recipe:
Split a big square of pixels into 4 quadrants and label them 1 to 4 Repeat this process for each of the smaller squares and add the quadrant number to the label Keep cutting the squares into 4 until you&amp;rsquo;ve gone as small as you want Now we can use regular expressions to find and mark boxes with certain labels I wrote a little bit of javascript that creates such fractals from regular expressions involving the digits 1, 2, 3 or 4.</description></item><item><title>4 Tips on Making Simulations Bug Resistant</title><link>https://example.com/4-tips-on-making-simulations-bug-resistant/</link><pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate><guid>https://example.com/4-tips-on-making-simulations-bug-resistant/</guid><description>Having written and used a decent number of simulations over the past few years I&amp;rsquo;ve come to understand that preventing bugs in scientific software is just a wee bit different from how it&amp;rsquo;s usually done in more standard software development.
For one thing, many of the simulations come under the category of high performance computing (HPC) simulations, so it can take a long time to build and run a test case, leading to iteration speeds that are painfully slow.</description></item><item><title>Parallelising Wondrous Numbers in C++</title><link>https://example.com/parallelising-wondrous-numbers-in-c-/</link><pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate><guid>https://example.com/parallelising-wondrous-numbers-in-c-/</guid><description>The Collatz conjecture, named for Lothar Collatz, goes as follows.
Take any positive integer \(n\). If \(n\) is even, half it, or if it&amp;rsquo;s odd, multiply it by three and add one. Repeating the process will always bring you back to 1.
The sequence of numbers generated by repeating the process is sometimes called the hailstone sequence due to the strange way the sequence bounces around, as you can see below if we start the sequence at 19.</description></item></channel></rss>